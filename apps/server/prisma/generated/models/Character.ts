
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Character` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Character
 * 
 */
export type CharacterModel = runtime.Types.Result.DefaultSelection<Prisma.$CharacterPayload>

export type AggregateCharacter = {
  _count: CharacterCountAggregateOutputType | null
  _min: CharacterMinAggregateOutputType | null
  _max: CharacterMaxAggregateOutputType | null
}

export type CharacterMinAggregateOutputType = {
  id: string | null
  name: string | null
  systemPrompt: string | null
  ollamaUrl: string | null
  ollamaApiKey: string | null
  ollamaModel: string | null
}

export type CharacterMaxAggregateOutputType = {
  id: string | null
  name: string | null
  systemPrompt: string | null
  ollamaUrl: string | null
  ollamaApiKey: string | null
  ollamaModel: string | null
}

export type CharacterCountAggregateOutputType = {
  id: number
  name: number
  systemPrompt: number
  ollamaUrl: number
  ollamaApiKey: number
  ollamaModel: number
  _all: number
}


export type CharacterMinAggregateInputType = {
  id?: true
  name?: true
  systemPrompt?: true
  ollamaUrl?: true
  ollamaApiKey?: true
  ollamaModel?: true
}

export type CharacterMaxAggregateInputType = {
  id?: true
  name?: true
  systemPrompt?: true
  ollamaUrl?: true
  ollamaApiKey?: true
  ollamaModel?: true
}

export type CharacterCountAggregateInputType = {
  id?: true
  name?: true
  systemPrompt?: true
  ollamaUrl?: true
  ollamaApiKey?: true
  ollamaModel?: true
  _all?: true
}

export type CharacterAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Character to aggregate.
   */
  where?: Prisma.CharacterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Characters to fetch.
   */
  orderBy?: Prisma.CharacterOrderByWithRelationInput | Prisma.CharacterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CharacterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Characters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Characters.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Characters
  **/
  _count?: true | CharacterCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CharacterMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CharacterMaxAggregateInputType
}

export type GetCharacterAggregateType<T extends CharacterAggregateArgs> = {
      [P in keyof T & keyof AggregateCharacter]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCharacter[P]>
    : Prisma.GetScalarType<T[P], AggregateCharacter[P]>
}




export type CharacterGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CharacterWhereInput
  orderBy?: Prisma.CharacterOrderByWithAggregationInput | Prisma.CharacterOrderByWithAggregationInput[]
  by: Prisma.CharacterScalarFieldEnum[] | Prisma.CharacterScalarFieldEnum
  having?: Prisma.CharacterScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CharacterCountAggregateInputType | true
  _min?: CharacterMinAggregateInputType
  _max?: CharacterMaxAggregateInputType
}

export type CharacterGroupByOutputType = {
  id: string
  name: string
  systemPrompt: string
  ollamaUrl: string
  ollamaApiKey: string | null
  ollamaModel: string
  _count: CharacterCountAggregateOutputType | null
  _min: CharacterMinAggregateOutputType | null
  _max: CharacterMaxAggregateOutputType | null
}

type GetCharacterGroupByPayload<T extends CharacterGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CharacterGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CharacterGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CharacterGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CharacterGroupByOutputType[P]>
      }
    >
  > 



export type CharacterWhereInput = {
  AND?: Prisma.CharacterWhereInput | Prisma.CharacterWhereInput[]
  OR?: Prisma.CharacterWhereInput[]
  NOT?: Prisma.CharacterWhereInput | Prisma.CharacterWhereInput[]
  id?: Prisma.StringFilter<"Character"> | string
  name?: Prisma.StringFilter<"Character"> | string
  systemPrompt?: Prisma.StringFilter<"Character"> | string
  ollamaUrl?: Prisma.StringFilter<"Character"> | string
  ollamaApiKey?: Prisma.StringNullableFilter<"Character"> | string | null
  ollamaModel?: Prisma.StringFilter<"Character"> | string
}

export type CharacterOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  systemPrompt?: Prisma.SortOrder
  ollamaUrl?: Prisma.SortOrder
  ollamaApiKey?: Prisma.SortOrderInput | Prisma.SortOrder
  ollamaModel?: Prisma.SortOrder
}

export type CharacterWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.CharacterWhereInput | Prisma.CharacterWhereInput[]
  OR?: Prisma.CharacterWhereInput[]
  NOT?: Prisma.CharacterWhereInput | Prisma.CharacterWhereInput[]
  name?: Prisma.StringFilter<"Character"> | string
  systemPrompt?: Prisma.StringFilter<"Character"> | string
  ollamaUrl?: Prisma.StringFilter<"Character"> | string
  ollamaApiKey?: Prisma.StringNullableFilter<"Character"> | string | null
  ollamaModel?: Prisma.StringFilter<"Character"> | string
}, "id">

export type CharacterOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  systemPrompt?: Prisma.SortOrder
  ollamaUrl?: Prisma.SortOrder
  ollamaApiKey?: Prisma.SortOrderInput | Prisma.SortOrder
  ollamaModel?: Prisma.SortOrder
  _count?: Prisma.CharacterCountOrderByAggregateInput
  _max?: Prisma.CharacterMaxOrderByAggregateInput
  _min?: Prisma.CharacterMinOrderByAggregateInput
}

export type CharacterScalarWhereWithAggregatesInput = {
  AND?: Prisma.CharacterScalarWhereWithAggregatesInput | Prisma.CharacterScalarWhereWithAggregatesInput[]
  OR?: Prisma.CharacterScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CharacterScalarWhereWithAggregatesInput | Prisma.CharacterScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Character"> | string
  name?: Prisma.StringWithAggregatesFilter<"Character"> | string
  systemPrompt?: Prisma.StringWithAggregatesFilter<"Character"> | string
  ollamaUrl?: Prisma.StringWithAggregatesFilter<"Character"> | string
  ollamaApiKey?: Prisma.StringNullableWithAggregatesFilter<"Character"> | string | null
  ollamaModel?: Prisma.StringWithAggregatesFilter<"Character"> | string
}

export type CharacterCreateInput = {
  id?: string
  name: string
  systemPrompt: string
  ollamaUrl: string
  ollamaApiKey?: string | null
  ollamaModel: string
}

export type CharacterUncheckedCreateInput = {
  id?: string
  name: string
  systemPrompt: string
  ollamaUrl: string
  ollamaApiKey?: string | null
  ollamaModel: string
}

export type CharacterUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  systemPrompt?: Prisma.StringFieldUpdateOperationsInput | string
  ollamaUrl?: Prisma.StringFieldUpdateOperationsInput | string
  ollamaApiKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ollamaModel?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CharacterUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  systemPrompt?: Prisma.StringFieldUpdateOperationsInput | string
  ollamaUrl?: Prisma.StringFieldUpdateOperationsInput | string
  ollamaApiKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ollamaModel?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CharacterCreateManyInput = {
  id?: string
  name: string
  systemPrompt: string
  ollamaUrl: string
  ollamaApiKey?: string | null
  ollamaModel: string
}

export type CharacterUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  systemPrompt?: Prisma.StringFieldUpdateOperationsInput | string
  ollamaUrl?: Prisma.StringFieldUpdateOperationsInput | string
  ollamaApiKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ollamaModel?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CharacterUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  systemPrompt?: Prisma.StringFieldUpdateOperationsInput | string
  ollamaUrl?: Prisma.StringFieldUpdateOperationsInput | string
  ollamaApiKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ollamaModel?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CharacterCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  systemPrompt?: Prisma.SortOrder
  ollamaUrl?: Prisma.SortOrder
  ollamaApiKey?: Prisma.SortOrder
  ollamaModel?: Prisma.SortOrder
}

export type CharacterMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  systemPrompt?: Prisma.SortOrder
  ollamaUrl?: Prisma.SortOrder
  ollamaApiKey?: Prisma.SortOrder
  ollamaModel?: Prisma.SortOrder
}

export type CharacterMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  systemPrompt?: Prisma.SortOrder
  ollamaUrl?: Prisma.SortOrder
  ollamaApiKey?: Prisma.SortOrder
  ollamaModel?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}



export type CharacterSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  systemPrompt?: boolean
  ollamaUrl?: boolean
  ollamaApiKey?: boolean
  ollamaModel?: boolean
}, ExtArgs["result"]["character"]>

export type CharacterSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  systemPrompt?: boolean
  ollamaUrl?: boolean
  ollamaApiKey?: boolean
  ollamaModel?: boolean
}, ExtArgs["result"]["character"]>

export type CharacterSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  systemPrompt?: boolean
  ollamaUrl?: boolean
  ollamaApiKey?: boolean
  ollamaModel?: boolean
}, ExtArgs["result"]["character"]>

export type CharacterSelectScalar = {
  id?: boolean
  name?: boolean
  systemPrompt?: boolean
  ollamaUrl?: boolean
  ollamaApiKey?: boolean
  ollamaModel?: boolean
}

export type CharacterOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "systemPrompt" | "ollamaUrl" | "ollamaApiKey" | "ollamaModel", ExtArgs["result"]["character"]>

export type $CharacterPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Character"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    systemPrompt: string
    ollamaUrl: string
    ollamaApiKey: string | null
    ollamaModel: string
  }, ExtArgs["result"]["character"]>
  composites: {}
}

export type CharacterGetPayload<S extends boolean | null | undefined | CharacterDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CharacterPayload, S>

export type CharacterCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CharacterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CharacterCountAggregateInputType | true
  }

export interface CharacterDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Character'], meta: { name: 'Character' } }
  /**
   * Find zero or one Character that matches the filter.
   * @param {CharacterFindUniqueArgs} args - Arguments to find a Character
   * @example
   * // Get one Character
   * const character = await prisma.character.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CharacterFindUniqueArgs>(args: Prisma.SelectSubset<T, CharacterFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CharacterClient<runtime.Types.Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Character that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CharacterFindUniqueOrThrowArgs} args - Arguments to find a Character
   * @example
   * // Get one Character
   * const character = await prisma.character.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CharacterFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CharacterFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CharacterClient<runtime.Types.Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Character that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CharacterFindFirstArgs} args - Arguments to find a Character
   * @example
   * // Get one Character
   * const character = await prisma.character.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CharacterFindFirstArgs>(args?: Prisma.SelectSubset<T, CharacterFindFirstArgs<ExtArgs>>): Prisma.Prisma__CharacterClient<runtime.Types.Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Character that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CharacterFindFirstOrThrowArgs} args - Arguments to find a Character
   * @example
   * // Get one Character
   * const character = await prisma.character.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CharacterFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CharacterFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CharacterClient<runtime.Types.Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Characters that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CharacterFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Characters
   * const characters = await prisma.character.findMany()
   * 
   * // Get first 10 Characters
   * const characters = await prisma.character.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const characterWithIdOnly = await prisma.character.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CharacterFindManyArgs>(args?: Prisma.SelectSubset<T, CharacterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Character.
   * @param {CharacterCreateArgs} args - Arguments to create a Character.
   * @example
   * // Create one Character
   * const Character = await prisma.character.create({
   *   data: {
   *     // ... data to create a Character
   *   }
   * })
   * 
   */
  create<T extends CharacterCreateArgs>(args: Prisma.SelectSubset<T, CharacterCreateArgs<ExtArgs>>): Prisma.Prisma__CharacterClient<runtime.Types.Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Characters.
   * @param {CharacterCreateManyArgs} args - Arguments to create many Characters.
   * @example
   * // Create many Characters
   * const character = await prisma.character.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CharacterCreateManyArgs>(args?: Prisma.SelectSubset<T, CharacterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Characters and returns the data saved in the database.
   * @param {CharacterCreateManyAndReturnArgs} args - Arguments to create many Characters.
   * @example
   * // Create many Characters
   * const character = await prisma.character.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Characters and only return the `id`
   * const characterWithIdOnly = await prisma.character.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CharacterCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CharacterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Character.
   * @param {CharacterDeleteArgs} args - Arguments to delete one Character.
   * @example
   * // Delete one Character
   * const Character = await prisma.character.delete({
   *   where: {
   *     // ... filter to delete one Character
   *   }
   * })
   * 
   */
  delete<T extends CharacterDeleteArgs>(args: Prisma.SelectSubset<T, CharacterDeleteArgs<ExtArgs>>): Prisma.Prisma__CharacterClient<runtime.Types.Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Character.
   * @param {CharacterUpdateArgs} args - Arguments to update one Character.
   * @example
   * // Update one Character
   * const character = await prisma.character.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CharacterUpdateArgs>(args: Prisma.SelectSubset<T, CharacterUpdateArgs<ExtArgs>>): Prisma.Prisma__CharacterClient<runtime.Types.Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Characters.
   * @param {CharacterDeleteManyArgs} args - Arguments to filter Characters to delete.
   * @example
   * // Delete a few Characters
   * const { count } = await prisma.character.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CharacterDeleteManyArgs>(args?: Prisma.SelectSubset<T, CharacterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Characters.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CharacterUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Characters
   * const character = await prisma.character.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CharacterUpdateManyArgs>(args: Prisma.SelectSubset<T, CharacterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Characters and returns the data updated in the database.
   * @param {CharacterUpdateManyAndReturnArgs} args - Arguments to update many Characters.
   * @example
   * // Update many Characters
   * const character = await prisma.character.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Characters and only return the `id`
   * const characterWithIdOnly = await prisma.character.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CharacterUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CharacterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Character.
   * @param {CharacterUpsertArgs} args - Arguments to update or create a Character.
   * @example
   * // Update or create a Character
   * const character = await prisma.character.upsert({
   *   create: {
   *     // ... data to create a Character
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Character we want to update
   *   }
   * })
   */
  upsert<T extends CharacterUpsertArgs>(args: Prisma.SelectSubset<T, CharacterUpsertArgs<ExtArgs>>): Prisma.Prisma__CharacterClient<runtime.Types.Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Characters.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CharacterCountArgs} args - Arguments to filter Characters to count.
   * @example
   * // Count the number of Characters
   * const count = await prisma.character.count({
   *   where: {
   *     // ... the filter for the Characters we want to count
   *   }
   * })
  **/
  count<T extends CharacterCountArgs>(
    args?: Prisma.Subset<T, CharacterCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CharacterCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Character.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CharacterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CharacterAggregateArgs>(args: Prisma.Subset<T, CharacterAggregateArgs>): Prisma.PrismaPromise<GetCharacterAggregateType<T>>

  /**
   * Group by Character.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CharacterGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CharacterGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CharacterGroupByArgs['orderBy'] }
      : { orderBy?: CharacterGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CharacterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCharacterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Character model
 */
readonly fields: CharacterFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Character.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CharacterClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Character model
 */
export interface CharacterFieldRefs {
  readonly id: Prisma.FieldRef<"Character", 'String'>
  readonly name: Prisma.FieldRef<"Character", 'String'>
  readonly systemPrompt: Prisma.FieldRef<"Character", 'String'>
  readonly ollamaUrl: Prisma.FieldRef<"Character", 'String'>
  readonly ollamaApiKey: Prisma.FieldRef<"Character", 'String'>
  readonly ollamaModel: Prisma.FieldRef<"Character", 'String'>
}
    

// Custom InputTypes
/**
 * Character findUnique
 */
export type CharacterFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Character
   */
  select?: Prisma.CharacterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Character
   */
  omit?: Prisma.CharacterOmit<ExtArgs> | null
  /**
   * Filter, which Character to fetch.
   */
  where: Prisma.CharacterWhereUniqueInput
}

/**
 * Character findUniqueOrThrow
 */
export type CharacterFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Character
   */
  select?: Prisma.CharacterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Character
   */
  omit?: Prisma.CharacterOmit<ExtArgs> | null
  /**
   * Filter, which Character to fetch.
   */
  where: Prisma.CharacterWhereUniqueInput
}

/**
 * Character findFirst
 */
export type CharacterFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Character
   */
  select?: Prisma.CharacterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Character
   */
  omit?: Prisma.CharacterOmit<ExtArgs> | null
  /**
   * Filter, which Character to fetch.
   */
  where?: Prisma.CharacterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Characters to fetch.
   */
  orderBy?: Prisma.CharacterOrderByWithRelationInput | Prisma.CharacterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Characters.
   */
  cursor?: Prisma.CharacterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Characters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Characters.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Characters.
   */
  distinct?: Prisma.CharacterScalarFieldEnum | Prisma.CharacterScalarFieldEnum[]
}

/**
 * Character findFirstOrThrow
 */
export type CharacterFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Character
   */
  select?: Prisma.CharacterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Character
   */
  omit?: Prisma.CharacterOmit<ExtArgs> | null
  /**
   * Filter, which Character to fetch.
   */
  where?: Prisma.CharacterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Characters to fetch.
   */
  orderBy?: Prisma.CharacterOrderByWithRelationInput | Prisma.CharacterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Characters.
   */
  cursor?: Prisma.CharacterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Characters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Characters.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Characters.
   */
  distinct?: Prisma.CharacterScalarFieldEnum | Prisma.CharacterScalarFieldEnum[]
}

/**
 * Character findMany
 */
export type CharacterFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Character
   */
  select?: Prisma.CharacterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Character
   */
  omit?: Prisma.CharacterOmit<ExtArgs> | null
  /**
   * Filter, which Characters to fetch.
   */
  where?: Prisma.CharacterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Characters to fetch.
   */
  orderBy?: Prisma.CharacterOrderByWithRelationInput | Prisma.CharacterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Characters.
   */
  cursor?: Prisma.CharacterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Characters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Characters.
   */
  skip?: number
  distinct?: Prisma.CharacterScalarFieldEnum | Prisma.CharacterScalarFieldEnum[]
}

/**
 * Character create
 */
export type CharacterCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Character
   */
  select?: Prisma.CharacterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Character
   */
  omit?: Prisma.CharacterOmit<ExtArgs> | null
  /**
   * The data needed to create a Character.
   */
  data: Prisma.XOR<Prisma.CharacterCreateInput, Prisma.CharacterUncheckedCreateInput>
}

/**
 * Character createMany
 */
export type CharacterCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Characters.
   */
  data: Prisma.CharacterCreateManyInput | Prisma.CharacterCreateManyInput[]
}

/**
 * Character createManyAndReturn
 */
export type CharacterCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Character
   */
  select?: Prisma.CharacterSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Character
   */
  omit?: Prisma.CharacterOmit<ExtArgs> | null
  /**
   * The data used to create many Characters.
   */
  data: Prisma.CharacterCreateManyInput | Prisma.CharacterCreateManyInput[]
}

/**
 * Character update
 */
export type CharacterUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Character
   */
  select?: Prisma.CharacterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Character
   */
  omit?: Prisma.CharacterOmit<ExtArgs> | null
  /**
   * The data needed to update a Character.
   */
  data: Prisma.XOR<Prisma.CharacterUpdateInput, Prisma.CharacterUncheckedUpdateInput>
  /**
   * Choose, which Character to update.
   */
  where: Prisma.CharacterWhereUniqueInput
}

/**
 * Character updateMany
 */
export type CharacterUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Characters.
   */
  data: Prisma.XOR<Prisma.CharacterUpdateManyMutationInput, Prisma.CharacterUncheckedUpdateManyInput>
  /**
   * Filter which Characters to update
   */
  where?: Prisma.CharacterWhereInput
  /**
   * Limit how many Characters to update.
   */
  limit?: number
}

/**
 * Character updateManyAndReturn
 */
export type CharacterUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Character
   */
  select?: Prisma.CharacterSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Character
   */
  omit?: Prisma.CharacterOmit<ExtArgs> | null
  /**
   * The data used to update Characters.
   */
  data: Prisma.XOR<Prisma.CharacterUpdateManyMutationInput, Prisma.CharacterUncheckedUpdateManyInput>
  /**
   * Filter which Characters to update
   */
  where?: Prisma.CharacterWhereInput
  /**
   * Limit how many Characters to update.
   */
  limit?: number
}

/**
 * Character upsert
 */
export type CharacterUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Character
   */
  select?: Prisma.CharacterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Character
   */
  omit?: Prisma.CharacterOmit<ExtArgs> | null
  /**
   * The filter to search for the Character to update in case it exists.
   */
  where: Prisma.CharacterWhereUniqueInput
  /**
   * In case the Character found by the `where` argument doesn't exist, create a new Character with this data.
   */
  create: Prisma.XOR<Prisma.CharacterCreateInput, Prisma.CharacterUncheckedCreateInput>
  /**
   * In case the Character was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CharacterUpdateInput, Prisma.CharacterUncheckedUpdateInput>
}

/**
 * Character delete
 */
export type CharacterDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Character
   */
  select?: Prisma.CharacterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Character
   */
  omit?: Prisma.CharacterOmit<ExtArgs> | null
  /**
   * Filter which Character to delete.
   */
  where: Prisma.CharacterWhereUniqueInput
}

/**
 * Character deleteMany
 */
export type CharacterDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Characters to delete
   */
  where?: Prisma.CharacterWhereInput
  /**
   * Limit how many Characters to delete.
   */
  limit?: number
}

/**
 * Character without action
 */
export type CharacterDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Character
   */
  select?: Prisma.CharacterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Character
   */
  omit?: Prisma.CharacterOmit<ExtArgs> | null
}
